import tensorflow as tf
from tensorflow.keras import Model
from tensorflow.keras.layers import Dense, Flatten, Conv2D, BatchNormalization, LeakyReLU, Reshape, Conv2DTranspose
from preprocess import load_image_batch
import generator.py
import discriminator.py
import tensorflow_gan as tfgan
import tensorflow_hub as hub

import numpy as np

from imageio import imwrite
import os
import argparse

# Killing optional CPU driver warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

gpu_available = tf.test.is_gpu_available()
print("GPU Available: ", gpu_available)

## --------------------------------------------------------------------------------------

parser = argparse.ArgumentParser(description='PIX2PIX')

parser.add_argument('--img-dir', type=str, default='./data/celebA',
                    help='Data where training images live')

parser.add_argument('--out-dir', type=str, default='./output',
                    help='Data where sampled output images will be written')

parser.add_argument('--mode', type=str, default='train',
                    help='Can be "train" or "test"')

parser.add_argument('--restore-checkpoint', action='store_true',
                    help='Use this flag if you want to resuming training from a previously-saved checkpoint')

parser.add_argument('--batch-size', type=int, default=128,
                    help='Sizes of image batches fed through the network')

parser.add_argument('--num-data-threads', type=int, default=2,
                    help='Number of threads to use when loading & pre-processing training images')

parser.add_argument('--num-epochs', type=int, default=10,
                    help='Number of passes through the training data to make before stopping')

parser.add_argument('--learn-rate', type=float, default=0.0002,
                    help='Learning rate for Adam optimizer')

parser.add_argument('--beta1', type=float, default=0.5,
                    help='"beta1" parameter for Adam optimizer')

parser.add_argument('--num-gen-updates', type=int, default=2,
                    help='Number of generator updates per discriminator update')

parser.add_argument('--log-every', type=int, default=7,
                    help='Print losses after every [this many] training iterations')

parser.add_argument('--save-every', type=int, default=500,
                    help='Save the state of the network after every [this many] training iterations')

parser.add_argument('--device', type=str, default='GPU:0' if gpu_available else 'CPU:0',
                    help='specific the device of computation eg. CPU:0, GPU:0, GPU:1, GPU:2, ... ')

args = parser.parse_args()

module = tf.keras.Sequential([hub.KerasLayer("https://tfhub.dev/google/tf2-preview/inception_v3/classification/4", output_shape=[1001])])
def fid_function(real_image_batch,generated_image_batch):
    """
    Given a batch of real images and a batch of generated images, this function pulls down a pre-trained inception
    v3 network and then uses it to extract the activations for both the real and generated images. The distance of
    these activations is then computed. The distance is a measure of how "realistic" the generated images are.

    :param real_image_batch: a batch of real images from the dataset, shape=[batch_size, height, width, channels]
    :param generated_image_batch: a batch of images generated by the generator network, shape=[batch_size, height, width, channels]

    :return: the inception distance between the real and generated images, scalar
    """
    INCEPTION_IMAGE_SIZE = (299, 299)
    real_resized = tf.image.resize(real_image_batch, INCEPTION_IMAGE_SIZE)
    fake_resized = tf.image.resize(generated_image_batch, INCEPTION_IMAGE_SIZE)
    module.build([None, 299, 299, 3])
    real_features = module(real_resized)
    fake_features = module(fake_resized)
    return tfgan.eval.frechet_classifier_distance_from_activations(real_features, fake_features)
# Train the model for one epoch.
def train(generator, discriminator, image_iterator, manager):
    """
    Train the model for one epoch. Save a checkpoint every 500 or so batches.

    :param generator: generator model
    :param discriminator: discriminator model
    :param image_iterator: iterator over images
    :param manager: the manager that handles saving checkpoints by calling save()
    """
    fid_av = 0
    num_batches = 0
    # Loop over our data until we run out
    for iteration, img_batch in enumerate(image_iterator):
        ground_truth_batch = tf.slice(img_batch, [0,0,0,0],[-1,-1,256,-1])
        outline_batch = tf.slice(img_batch, [0,0,256,0],[-1,-1,-1,-1])
        with tf.GradientTape() as tape_d:
            gen_output = generator(outline_batch)
            real_probs = discriminator(outline_batch,ground_truth_batch)
            fake_probs = discriminator(outline_batch,gen_output)
            disc_loss = discriminator.loss_function(real_probs,fake_probs)
        d_grad = tape_d.gradient(disc_loss,discriminator.trainable_variables)
        discriminator.optimizer.apply_gradients(zip(d_grad, discriminator.trainable_variables))
        for i in range(args.num_gen_updates):
            with tf.GradientTape() as tape_g:
                gen_loss= generator.loss_function(discriminator,outline_batch,ground_truth_batch)
            g_grad = tape_g.gradient(gen_loss,generator.trainable_variables)
            generator.optimizer.apply_gradients(zip(g_grad, generator.trainable_variables))

        # Save
        if iteration % args.save_every == 0:
            manager.save()

        if iteration % 100 == 0:
            if iteration % 500 == 0:
                test(generator,outline_batch)
            fid_ = fid_function(ground_truth_batch, gen_output)
            print('**** INCEPTION DISTANCE: %g ****' % fid_, disc_loss, gen_loss)
            fid_av = fid_av + fid_
            num_batches = num_batches + 1
    fid_av = fid_av / num_batches
    return fid_av


# Test the model by generating some samples.
def test(generator,img_batch):
    """
    Test the model.

    :param generator: generator model
    :param outline_batch: batch of outlines to test on

    :return: None
    """
    outline_batch = tf.slice(img_batch, [0, 0, 256, 0], [-1, -1, -1, -1])
    img = np.array(generator(outline_batch))

    ### Below, we've already provided code to save these generated images to files on disk
    # Rescale the image from (-1, 1) to (0, 255)
    img = ((img / 2) - 0.5) * 255
    # Convert to uint8
    img = img.astype(np.uint8)
    # Save images to disk
    for i in range(0, args.batch_size):
        img_i = img[i]
        s = args.out_dir+'/'+str(i)+'.png'
        imwrite(s, img_i)


## --------------------------------------------------------------------------------------

def main():
    # Load a batch of images (to feed to the discriminator)
    im_iterator = load_image_batch(args.img_dir, batch_size=args.batch_size, n_threads=args.num_data_threads)

    # Initialize generator and discriminator models
    generator = generator.UnetGenerator(3,3)
    discriminator = patchgan.patchgan()

    # For saving/loading models
    checkpoint_dir = './checkpoints'
    checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
    checkpoint = tf.train.Checkpoint(generator=generator, discriminator=discriminator)
    manager = tf.train.CheckpointManager(checkpoint, checkpoint_dir, max_to_keep=3)
    # Ensure the output directory exists
    if not os.path.exists(args.out_dir):
        os.makedirs(args.out_dir)

    if args.restore_checkpoint or args.mode == 'test':
        # restores the latest checkpoint using from the manager
        checkpoint.restore(manager.latest_checkpoint)

    try:
        # Specify an invalid GPU device
        with tf.device('/device:' + args.device):
            if args.mode == 'train':
                for epoch in range(0, args.num_epochs):
                    print('========================== EPOCH %d  ==========================' % epoch)
                    avg_fid = train(generator, discriminator, im_iterator, manager)
                    print("Average FID for Epoch: " + str(avg_fid))
                    # Save at the end of the epoch, too
                    print("**** SAVING CHECKPOINT AT END OF EPOCH ****")
                    manager.save()
            if args.mode == 'test':
                for i in enumerate(im_iterator):
                    img_batch = i
                    break
                test(generator,img_batch)
    except RuntimeError as e:
        print(e)

if __name__ == '__main__':
   main()
